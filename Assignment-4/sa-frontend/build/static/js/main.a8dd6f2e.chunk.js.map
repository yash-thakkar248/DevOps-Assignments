{"version":3,"sources":["app/components/Polarity.js","App.js","registerServiceWorker.js","index.js"],"names":["Polarity","green","Math","round","this","props","polarity","textColor","backgroundColor","padding","style","sentence","Component","marginLeft","App","onEnterPress","e","key","analyzeSentence","state","undefined","fetch","method","headers","body","JSON","stringify","textField","getValue","then","response","json","data","setState","polarityComponent","className","Paper","zDepth","TextField","inputRef","ref","onKeyUp","bind","hintText","variant","onClick","label","analyzeSentenceLocal","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","console","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","registerServiceWorker"],"mappings":"wQAqBeA,E,4JAdb,WACE,IAAMC,EAAQC,KAAKC,MAAkC,KAA3BC,KAAKC,MAAMC,SAAW,IAE1CC,EAAY,CAChBC,gBAAiB,QAFP,IAAMP,GAEgB,KAAOA,EAAQ,OAC/CQ,QAAS,QAEX,OACE,sBAAKC,MAAOH,EAAZ,cACIH,KAAKC,MAAMM,SADf,qBAC2CP,KAAKC,MAAMC,SAAU,W,GAd/CM,aCKjBF,EAAQ,CACZG,WAAY,IAmECC,E,kDAhEb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IAsCRU,aAAe,SAAAC,GACC,UAAVA,EAAEC,KACJ,EAAKC,mBAvCP,EAAKC,MAAQ,CACXR,SAAU,GACVL,cAAUc,GAJK,E,mDA4BnB,WAAmB,IAAD,OAChBC,MAAM,uCAAwC,CAC5CC,OAAQ,OAAQC,QAAS,CACvB,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEf,SAAUP,KAAKuB,UAAUC,eAEjDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAASD,Q,kCAlB9B,WAAwB,IAAD,OACrBX,MAAM,kCAAmC,CACvCC,OAAQ,OAAQC,QAAS,CACvB,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEf,SAAUP,KAAKuB,UAAUC,eAEjDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAASD,Q,oBAkB9B,WAAU,IAAD,OACDE,OAA4Cd,IAAxBhB,KAAKe,MAAMb,SACnC,cAAC,EAAD,CAAUK,SAAUP,KAAKe,MAAMR,SAAUL,SAAUF,KAAKe,MAAMb,WAC9D,KACF,OACE,cAAC,IAAD,UACE,qBAAK6B,UAAU,YAAf,SACE,eAACC,EAAA,EAAD,CAAOC,OAAQ,EAAGF,UAAU,UAA5B,UACE,8DACA,cAACG,EAAA,EAAD,CAAWC,SAAU,SAAAC,GAAG,OAAI,EAAKb,UAAYa,GAAKC,QAASrC,KAAKW,aAAa2B,KAAKtC,MAChFuC,SAAS,wBACX,cAAC,IAAD,CAAcC,QAAQ,YAAYlC,MAAOA,EAAOmC,QAASzC,KAAKc,gBAAgBwB,KAAKtC,MAAnF,kBACA,cAAC,IAAD,CAAc0C,MAAM,YAAYpC,MAAOA,EAAOmC,QAASzC,KAAK2C,qBAAqBL,KAAKtC,QACrF8B,a,GA1DKtB,aCVZoC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyBN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT1B,MAAK,SAAC8B,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1C,OACfqC,UAAUC,cAAcO,gBAYnCC,OAAM,SAACC,GACNC,QAAQD,MAAM,4CAA6CA,MChDjEE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDMlC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAEFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,GAAN,sBACPzB,GAIFM,EAAgBC,OCrBxBqB,K","file":"static/js/main.a8dd6f2e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nclass Polarity extends Component {\n  propTypes = {\n    sentence: PropTypes.string.isRequired,\n    polarity: PropTypes.number.isRequired,\n  };\n  render() {\n    const green = Math.round((this.props.polarity + 1) * 128);\n    const red = 255 - green;\n    const textColor = {\n      backgroundColor: \"rgb(\" + red + \", \" + green + \", 0)\",\n      padding: \"15px\",\n    };\n    return (\n      <div style={textColor}>\n        \"{this.props.sentence}\" has polarity of {this.props.polarity}{\" \"}\n      </div>\n    );\n  }\n}\nexport default Polarity;\n","import React, { Component } from 'react';\nimport './App.css';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport TextField from '@material-ui/core/TextField';\nimport RaisedButton from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Polarity from \"./app/components/Polarity\";\nconst style = {\n  marginLeft: 12,\n};\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sentence: '',\n      polarity: undefined\n    };\n  };\n  analyzeSentence() {\n    fetch('http://localhost:8080/sentiment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ sentence: this.textField.value })\n    })\n      .then(response => response.json())\n      .then(data => this.setState(data));\n  }\n  analyzeSentenceLocal() {\n    fetch('http://localhost:8080/sentiment', {\n      method: 'POST', headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ sentence: this.textField.getValue() })\n    })\n    .then(response => response.json())\n    .then(data => this.setState(data));\n  }\n  analyzeSentence() {\n    fetch('http://192.168.99.100:8080/sentiment', {\n      method: 'POST', headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ sentence: this.textField.getValue() })\n    })\n    .then(response => response.json())\n    .then(data => this.setState(data));\n  }\n\n  onEnterPress = e => {\n    if (e.key === 'Enter') {\n      this.analyzeSentence();\n    }\n  };\n  render() {\n    const polarityComponent = this.state.polarity !== undefined ?\n      <Polarity sentence={this.state.sentence} polarity={this.state.polarity} /> :\n      null;\n    return (\n      <MuiThemeProvider>\n        <div className=\"centerize\">\n          <Paper zDepth={1} className=\"content\">\n            <h2>CSYE 7220 Sentiment Analyser</h2>\n            <TextField inputRef={ref => this.textField = ref} onKeyUp={this.onEnterPress.bind(this)}\n              hintText=\"Type your sentence.\" />\n            <RaisedButton variant=\"contained\" style={style} onClick={this.analyzeSentence.bind(this)}>Send</RaisedButton>\n            <RaisedButton label=\"SendLocal\" style={style} onClick={this.analyzeSentenceLocal.bind(this)}/>\n            {polarityComponent}\n          </Paper>\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\nexport default App;","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW. \n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not. checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache. // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app. console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached. // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message. console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}