{"ast":null,"code":"var isLocalhost=Boolean(window.location.hostname===\"localhost\"||// [::1] is the IPv6 localhost address.\nwindow.location.hostname===\"[::1]\"||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export default function register(){if(process.env.NODE_ENV===\"production\"&&\"serviceWorker\"in navigator){// The URL constructor is available in all browsers that support SW. \nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\nreturn;}window.addEventListener(\"load\",function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Lets check if a service worker still exists or not. checkValidServiceWorker(swUrl);\n}else{// Is not local host. Just register service worker\nregisterValidSW(swUrl);}});}}function registerValidSW(swUrl){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;installingWorker.onstatechange=function(){if(installingWorker.state===\"installed\"){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache. // It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app. console.log('New content is available; please refresh.');\n}else{// At this point, everything has been precached. // It's the perfect time to display a\n// \"Content is cached for offline use.\" message. console.log('Content is cached for offline use.');\n}}};};}).catch(function(error){console.error(\"Error during service worker registration:\",error);});}function checkValidServiceWorker(swUrl){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nif(response.status===404||response.headers.get(\"content-type\").indexOf(\"javascript\")===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl);}}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\");});}export function unregister(){if(\"serviceWorker\"in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"sources":["/Users/yashthakkar/Desktop/untitled folder/DevOps-Assignments/dr1/src/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","registerValidSW","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","console","checkValidServiceWorker","fetch","response","status","headers","get","indexOf","ready","unregister","reload","log"],"mappings":"AAAA,GAAMA,CAAAA,WAAW,CAAGC,OAAO,CACzBC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA6B,WAA7B,EACE;AACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA6B,OAF/B,EAGE;AACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CACE,wDADF,CALuB,CAA3B,CAUA,cAAe,SAASC,CAAAA,QAAT,EAAoB,CACjC,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,EAAyC,iBAAmBC,CAAAA,SAAhE,CAA2E,CACzE;AACA,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,GAAJ,CAAQL,OAAO,CAACC,GAAR,CAAYK,UAApB,CAAgCX,MAAM,CAACC,QAAvC,CAAlB,CACA,GAAIQ,SAAS,CAACG,MAAV,GAAqBZ,MAAM,CAACC,QAAP,CAAgBW,MAAzC,CAAiD,CAC/C;AACA;AACA;AACA,OACD,CACDZ,MAAM,CAACa,gBAAP,CAAwB,MAAxB,CAAgC,UAAM,CACpC,GAAMC,CAAAA,KAAK,WAAMT,OAAO,CAACC,GAAR,CAAYK,UAAlB,sBAAX,CACA,GAAIb,WAAJ,CAAiB,CACf;AACD,CAFD,IAEO,CACL;AACAiB,eAAe,CAACD,KAAD,CAAf,CACD,CACF,CARD,EASD,CACF,CACD,QAASC,CAAAA,eAAT,CAAyBD,KAAzB,CAAgC,CAC9BN,SAAS,CAACQ,aAAV,CACGZ,QADH,CACYU,KADZ,EAEGG,IAFH,CAEQ,SAACC,YAAD,CAAkB,CACtBA,YAAY,CAACC,aAAb,CAA6B,UAAM,CACjC,GAAMC,CAAAA,gBAAgB,CAAGF,YAAY,CAACG,UAAtC,CACAD,gBAAgB,CAACE,aAAjB,CAAiC,UAAM,CACrC,GAAIF,gBAAgB,CAACG,KAAjB,GAA2B,WAA/B,CAA4C,CAC1C,GAAIf,SAAS,CAACQ,aAAV,CAAwBQ,UAA5B,CAAwC,CACtC;AACA;AACA;AACD,CAJD,IAIO,CACL;AACA;AACD,CACF,CACF,CAXD,CAYD,CAdD,CAeD,CAlBH,EAmBGC,KAnBH,CAmBS,SAACC,KAAD,CAAW,CAChBC,OAAO,CAACD,KAAR,CAAc,2CAAd,CAA2DA,KAA3D,EACD,CArBH,EAsBD,CACD,QAASE,CAAAA,uBAAT,CAAiCd,KAAjC,CAAwC,CACtC;AACAe,KAAK,CAACf,KAAD,CAAL,CACGG,IADH,CACQ,SAACa,QAAD,CAAc,CAClB;AACA,GACEA,QAAQ,CAACC,MAAT,GAAoB,GAApB,EACAD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,EAAqCC,OAArC,CAA6C,YAA7C,IAA+D,CAAC,CAFlE,CAGE,CACA;AACA1B,SAAS,CAACQ,aAAV,CAAwBmB,KAAxB,CAA8BlB,IAA9B,CAAmC,SAACC,YAAD,CAAkB,CACnDA,YAAY,CAACkB,UAAb,GAA0BnB,IAA1B,CAA+B,UAAM,CACnCjB,MAAM,CAACC,QAAP,CAAgBoC,MAAhB,GACD,CAFD,EAGD,CAJD,EAKD,CAVD,IAUO,CACL;AACAtB,eAAe,CAACD,KAAD,CAAf,CACD,CACF,CAjBH,EAkBGW,KAlBH,CAkBS,UAAM,CACXE,OAAO,CAACW,GAAR,CACE,+DADF,EAGD,CAtBH,EAuBD,CACD,MAAO,SAASF,CAAAA,UAAT,EAAsB,CAC3B,GAAI,iBAAmB5B,CAAAA,SAAvB,CAAkC,CAChCA,SAAS,CAACQ,aAAV,CAAwBmB,KAAxB,CAA8BlB,IAA9B,CAAmC,SAACC,YAAD,CAAkB,CACnDA,YAAY,CAACkB,UAAb,GACD,CAFD,EAGD,CACF","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW. \n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not. checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache. // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app. console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached. // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message. console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}